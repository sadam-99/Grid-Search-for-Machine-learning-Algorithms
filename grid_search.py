# -*- coding: utf-8 -*-
"""sklearn_lab_submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jnEM-DwJuPeGwGqde636bjkbdRdqLXpN
"""

# Scikit learn Grid Search 
# Written by Shivam Gupta (NET ID: SXG190040)

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
import numpy as np
import pandas as pd
from sklearn import model_selection

########################################################################
#	Loading the datasets(Breast Cancer Wisconsin)
df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data', header=None, names=['Sample code number','Clump Thickness','Uniformity of Cell Size','Uniformity of Cell Shape','Marginal Adhesion','Single Epithelial Cell Size','Bare Nuclei','Bland Chromatin','Normal Nucleoli','Mitoses','Class'])
# df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None, names=['SepalL','SepalW','PetalL','PetalW','Class'])
# df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data', header=None, names= ['Age of patient at time of operation', 'Patients year of operation','Number of positive axillary nodes detected' , 'Survival status'])
# df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data', header=None)
train_DF, test_DF = model_selection.train_test_split(df.replace(to_replace ="?", value = "0"), test_size=0.2)
X_train = np.array(train_DF[train_DF.columns[0:-1]])
y_train = np.array(train_DF["Class"])
X_test = np.array(test_DF[test_DF.columns[0:-1]])
y_test = np.array(test_DF["Class"])

########################################################################
# 1)	Decision Tree
########################################################################
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'max_depth': [6, 7, None], 'min_samples_split': [2, 4, 5],'min_samples_leaf': [1, 2, 3 ], 'max_features':[None, "log2"],'max_leaf_nodes':[None, 1000]}]
scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(dt, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()

#  decision tree
from sklearn.metrics import accuracy_score
output_accuracy = accuracy_score(y_true, y_pred)
output_accuracy

########################################################################
# 2)	Neural Net
########################################################################

from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation

tuned_parameters = [{'hidden_layer_sizes': [100, 150, 200], 'activation': ['logistic', 'tanh', 'relu'],
                     'alpha': [0.0001, 0.0002 ], 'learning_rate': ['constant', 'invscaling', 'adaptive'], 'max_iter': [200, 400, 500]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(mlp, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()

########################################################################
#	3) SVM
########################################################################

from sklearn.svm import SVC
svm = SVC()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation

tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-5, 1e-6],
                     'C': [1, 10, 100, 1000], 'max_iter':[100, 200], 'random_state':[2, 3]},
                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000], 'max_iter':[100, 200], 'random_state':[2, 4]}, 
                    {'kernel': ['poly'], 'degree': [3, 4],'C': [1,10, 100],'max_iter': [100, 200], 'random_state': [2, 4]},]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(svm, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
#	4) Gaussian Naive Bayes
########################################################################

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'priors': [None, [0.3,0.7] , [0.4, 0.6]]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(gnb, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
# 5)	Logistic Regression
########################################################################
from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'penalty': ['l1', 'l2'], 'C': [1, 0.5],'tol': [1e-4, 1e-5],
                     'max_iter': [100, 150]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(logisticRegr, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
# 6)	k-NN
########################################################################

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'n_neighbors': [5, 6, 7], 'weights': ['uniform', 'distance'],'algorithm': ['auto', 'ball_tree', 'kd_tree'],'p': [1, 2]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(knn, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
#	7) Bagging
########################################################################
from sklearn.ensemble import BaggingClassifier
bagging = BaggingClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'n_estimators': [5,10], 'max_samples': [1, 2],
                     'max_features': [1 ,2], 'random_state': [None]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(bagging, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
#	8) Random Forest
########################################################################
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'n_estimators': [10, 100],'max_depth': [None, 100],'max_features': ["auto", "sqrt", "log2", None],   'min_samples_split': [2, 4],
                     'min_samples_leaf': [1, 2, 4 ]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(rfc , tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()

########################################################################
# 9)	AdaBoost Classifier
########################################################################
from sklearn.ensemble import AdaBoostClassifier
adaboost = AdaBoostClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'n_estimators': [50, 50, 70], 'learning_rate': [1, 1.1, 1.2],
                     'algorithm': ['SAMME', 'SAMME.R'], 'random_state': [None]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(adaboost , tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
#	10) Gradient Boosting Classifier
########################################################################
from sklearn.ensemble import GradientBoostingClassifier
gbc = GradientBoostingClassifier()

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'loss': ['deviance', 'exponential'], 'learning_rate': [0.1, 0.2],'n_estimators': [80, 100],
                     'max_depth': [3, 5],'max_features': ["auto", "sqrt", "log2", None],   'min_samples_split': [2, 4],
                     'min_samples_leaf': [1, 2, 4 ]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(gbc, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()



########################################################################
# 11) XG Boost
########################################################################
# from xgboost import XGBClassifier
from xgboost.sklearn import XGBClassifier
XGB = XGBClassifier()

XGB

# Commented out IPython magic to ensure Python compatibility.
# Set the parameters by cross-validation
tuned_parameters = [{'learning_rate': [0.1, 0.2], 'n_estimators': [100, 150],'min_child_weight': [1, 2] 
                     ,'max_delta_step': [0, 1],  'booster ': ['gbtree', 'gblinear', 'dart'], 'seed': [0]}]

scores = ['precision', 'recall']

for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(XGB, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
#               % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()